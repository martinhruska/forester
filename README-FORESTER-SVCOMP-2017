Instructions for SV-COMP'17
===========================

0) Dependencies:

   * GCC and G++
    - on Ubuntu/Debian provided by packages called 'g++' and 'gcc'.
    We tested our tool using 'gcc-5' for compiling test cases
	and 'g++-5' since it is a Ubuntu 16.04 default.

	- the binary version of Forester in 'libfa.so' is compiled against
	  'gcc-5 (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609'. It is necessary
	  to have exactly this version of gcc-5 to make the binary work.
	  Further, we suppose that this version of gcc is located in
	  the path '/usr/bin/gcc-5'. The location is defined by the variable 'GCC_HOST'
	  in the 'sv_comp_run.py' script and can be changed if needed.

   * GCC plugin devel
     - on Ubuntu/Debian provided by a package called 'gcc-X-multilib' 'gcc-X-plugin-dev'
       where X is version of gcc, e.g. gcc-5-multilib for the gcc version 5.

   * Python 3
     - on Ubuntu/Debian provided by a package called 'python3'

1) The following files are needed to run Forester:
   'sv_comp_run.py' ... A script wrapping Forester for SV-COMP needs
   'libfa.so'       ... Forester compiled to a shared object

   We also provide the 'forester_benchexec_example.xml' file containig
   an example Benchexec defition for evaluation of Forester.

2) Use the script './sv_comp_run.py' to run Forester on a test-case:

    Usage: sv_comp_run.py [-h] --trace TRACE [--properties PROPERTIES] [--time] file

      -h
          Print help 

      --trace TRACE
          The ouput file of a witness (for the answer TRUE or FALSE)

      --properties PROPERTIES
          The file with the specified verification properties. When not
          specified, the default path of property file is 'path/ALL.prp'
		  where the verified file has the 'path/file' path.

      --time
          Print consumed CPU time

      file
          The path to the file containing program under verification

   Since Forester participates only in the Heap Data Structures category
   the 32-bit architecture is used by default and cannot be changed
   by any parameter of the script.

   A result of a verification task is an item from { TRUE, FALSE, UNKNOWN } and
   is printed to the standard output. When a result of a verification task is
   TRUE or FALSE, the related witness trace is printed to the file specified by the
   --trace option. When there are more verification properties to be checked
   and one of them is violated, the answer has the format FALSE(p) where p is
   the violated property.

3) When evalutating Forester with 'Benchexec' use the 'option' item
   to define the '--trace' parameter in an XML configuration file.
   The other attributes are set in the 'cmdline' function of Forester wrapping script for 'Benchexec'.
   An example of configuration XML file for Benchexec is 'forester_benchexec_example.xml'
   in this folder.
